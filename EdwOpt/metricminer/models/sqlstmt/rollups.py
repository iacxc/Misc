Report = 'ETL Scripts/Script Execution Summary by Rollup_name'
SQL = '''SELECT
    SCRIPT_NAME
,   ROLLUP_NAME
,   TIMESTAMPDIFF(SQL_TSI_SECOND, MIN(EXEC_START_LCT_TS), MAX(EXEC_END_LCT_TS)) / 60 AS ELAP_MINS
,   MIN(EXEC_START_LCT_TS) AS SCRIPT_START_TS
,   MAX(EXEC_END_LCT_TS) AS SCRIPT_END_TS
,   COUNT(*) AS SCRIPT_STEPS
,   SUM(CASE
        WHEN ERROR_CODE <> 0
            THEN 1
        ELSE 0
        END) AS ERROR_CNT
,   SUM(NUM_ROWS_IUD) AS NUM_ROWS_IUD_SUM
,   SUM(ROWS_ACCESSED) AS ROWS_ACCESSED_SUM
,   CAST(SUM(QUERY_ELAPSED_TIME) / 60000000 AS NUMERIC(10, 2)) AS QUERY_ELAPSED_TIME_MIN
,   CAST(SUM(COMPILE_ELAPSED_TIME / 360000000) AS NUMERIC(18, 2)) AS COMPILE_ELAPSED_HRS_SUM
,   (SUM(SQL_PROCESS_BUSY_TIME) + SUM(DISK_PROCESS_BUSY_TIME)) / 36000000.00 AS CPU_BUSY_TIME_MIN
,   SUM(DISK_IOS) AS DISK_IOS_SUM
,   SUM(NUM_REQUEST_MSG_BYTES + NUM_REPLY_MSG_BYTES) AS MSG_BYTES_SUM
,   SUM(MAX_MEM_USED) AS MAX_MEM_USED_SUM
,   SUM(OVF_FILE_COUNT) AS OVF_FILE_COUNT_SUM
,   SUM(WAIT_TIME) / 60.00 AS WAIT_TIME_MIN
,   CAST(SUM(MASTER_EXECUTION_TIME) / 60000000 AS NUMERIC(10, 2)) AS MASTER_EXECUTION_TIME_MIN
,   SUM(HOLD_TIME) AS HOLD_TIME_SUM
,   SUM(TOTAL_MEM_ALLOC) AS TOTAL_MEM_ALLOC_SUM
,   SUM(TOTAL_NUM_AQR_RETRIES) AS TOTAL_NUM_AQR_RETRIES_SUM
,   MID
,   SESS.SESSION_ID AS SESS_ID

FROM NEO.HP_INFRA.SCRIPT_QUERY_HISTORY SESS
WHERE
	SESS.EXEC_START_LCT_TS BETWEEN ? AND ?
GROUP BY SCRIPT_NAME,
	SESS.SESSION_ID,
	MID,
	ROLLUP_NAME
ORDER BY SCRIPT_START_TS'''

