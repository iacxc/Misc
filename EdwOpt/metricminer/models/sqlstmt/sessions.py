
from __future__ import print_function

def get_all_schemas():
    return """
SELECT trim(c.cat_name) || '.' || trim(s.schema_name)
    FROM hp_system_catalog.system_schema.schemata s,
         hp_system_catalog.system_schema.catsys c
    WHERE c.CAT_UID = s.CAT_UID
FOR READ UNCOMMITTED ACCESS IN SHARE MODE"""


def get_schema(catalog):
    return """
SELECT s.schema_name
FROM hp_system_catalog.system_schema.schemata s,
     hp_system_catalog.system_schema.catsys c
WHERE s.cat_uid = c.cat_uid
     AND TRIM(c.cat_name) = '%(catalog)s'
""" % {'catalog': catalog}


def get_tables(catalog):
    return """
SELECT trim(s.schema_name) || '.' || trim(o.object_name)
FROM %(catalog)s.hp_definition_schema.objects o,
    hp_system_catalog.system_schema.schemata s
WHERE o.schema_uid = s.schema_uid
    AND o.object_security_class in ('UT', 'UM', 'SM', 'MU')
    AND o.object_name_space = 'TA'
    AND o.object_type = 'BT'
FOR READ UNCOMMITTED ACCESS IN SHARE MODE""" % {'catalog': catalog}


def get_sql(action):
    """ get the report sql for a specific dsn and action"""
    import concurrency

    return getattr(action, 'SQL')

    report = {
       'network': {
            'Report': 'Network/Sums 1-10-60 Intervals',
            'SQL': '''SELECT
    DATE_TIME
,   TRIM(IP_ADDRESS_ID     )                   AS "IP_ADDRESS_ID"
,   TRIM(INTERFACE         )                   AS "INTERFACE"
,   CAST(SUM(RCV_BYTES     ) AS NUMERIC(18,0)) AS "SUM_RCV_BYTES"
,   CAST(SUM(RCV_PACKETS   ) AS NUMERIC(18,0)) AS "SUM_RCV_PACKETS"
,   CAST(SUM(RCV_ERRS      ) AS NUMERIC(18,0)) AS "SUM_RCV_ERRS"
,   CAST(SUM(RCV_DROP      ) AS NUMERIC(18,0)) AS "SUM_RCV_DROP"
,   CAST(SUM(RCV_FIFO      ) AS NUMERIC(18,0)) AS "SUM_RCV_FIFO"
,   CAST(SUM(RCV_FRAME     ) AS NUMERIC(18,0)) AS "SUM_RCV_FRAME"
,   CAST(SUM(RCV_COMPRESSED) AS NUMERIC(18,0)) AS "SUM_RCV_COMPRESSED"
,   CAST(SUM(RCV_MULTICAST ) AS NUMERIC(18,0)) AS "SUM_RCV_MULTICAST"
,   CAST(SUM(TXN_BYTES     ) AS NUMERIC(18,0)) AS "SUM_TXN_BYTES"
,   CAST(SUM(TXN_PACKETS   ) AS NUMERIC(18,0)) AS "SUM_TXN_PACKETS"
,   CAST(SUM(TXN_ERRS      ) AS NUMERIC(18,0)) AS "SUM_TXN_ERRS"
,   CAST(SUM(TXN_DROP      ) AS NUMERIC(18,0)) AS "SUM_TXN_DROP"
,   CAST(SUM(TXN_FIFO      ) AS NUMERIC(18,0)) AS "SUM_TXN_FIFO"
,   CAST(SUM(TXN_COLLS     ) AS NUMERIC(18,0)) AS "SUM_TXN_COLLS"
,   CAST(SUM(TXN_CARRIER   ) AS NUMERIC(18,0)) AS "SUM_TXN_CARRIER"
,   CAST(SUM(TXN_COMPRESSED) AS NUMERIC(18,0)) AS "SUM_TXN_COMPRESSED"
FROM (SELECT
        CASE '%d'
            WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
    ,   IP_ADDRESS_ID
    ,   INTERFACE
    ,   RCV_BYTES
    ,   RCV_PACKETS
    ,   RCV_ERRS
    ,   RCV_DROP
    ,   RCV_FIFO
    ,   RCV_FRAME
    ,   RCV_COMPRESSED
    ,   RCV_MULTICAST
    ,   TXN_BYTES
    ,   TXN_PACKETS
    ,   TXN_ERRS
    ,   TXN_DROP
    ,   TXN_FIFO
    ,   TXN_COLLS
    ,   TXN_CARRIER
    ,   TXN_COMPRESSED
    FROM
        MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_NETWORK_1
    WHERE
        GEN_TS_LCT BETWEEN ? AND ?
    ) AS A
GROUP BY
    DATE_TIME
,   IP_ADDRESS_ID
,   INTERFACE
ORDER BY
    DATE_TIME
,   IP_ADDRESS_ID
,   INTERFACE
FOR READ UNCOMMITTED ACCESS IN SHARE MODE''' % 1},

        'se_delta': {
            'Report': 'Session/Slow LDAPs 1-10-60 Min Intervals',
            'SQL': '''SELECT
    DATE_TIME
,   NODE_ID
,   TRIM(VOLUME_NAME)                          AS "VOLUME_NAME"
,   SUM(REQUESTS)                              AS "SUM_REQUESTS"
,   SUM(SERVICE_TIME)                          AS "SUM_SERVICE_TIME"
,   SUM(READDATA_CALLS)                        AS "SUM_READDATA_CALLS"
,   SUM(READDATA_TIME)                         AS "SUM_READDATA_TIME"
,   SUM(READDATA_BYTES)                        AS "SUM_READDATA_BYTES"
,   SUM(REPLY_CALLS)                           AS "SUM_REPLY_CALLS"
,   SUM(REPLY_TIME)                            AS "SUM_REPLY_TIME"
,   SUM(REPLY_BYTES)                           AS "SUM_REPLY_BYTES"
,   SUM(DISK_IOS)                              AS "SUM_DISK_IOS"
,   SUM(IO_TRANSIT_WAITS)                      AS "SUM_IO_TRANSIT_WAITS"
,   SUM(REQUEST_IO_WAIT_TIME)                  AS "SUM_REQUEST_IO_WAIT_TIME"
,   SUM(REQUEST_MESSAGES)                      AS "SUM_REQUEST_MESSAGES"
,   SUM(REQUEST_MESSAGE_WAIT_TIME)             AS "SUM_REQUEST_MESSAGE_WAIT_TIME"
,   SUM(REQUEST_SEMAPHORE_WAITS)               AS "SUM_REQUEST_SEMAPHORE_WAITS"
,   SUM(REQUEST_SEM_WAIT_TIME)                 AS "SUM_REQUEST_SEM_WAIT_TIME"
,   SUM(FILESEM_WAIT_TIME)                     AS "SUM_FILESEM_WAIT_TIME"
,   SUM(VOLSEM_WAITS)                          AS "SUM_VOLSEM_WAITS"
,   SUM(VOLSEM_WAIT_TIME)                      AS "SUM_VOLSEM_WAIT_TIME"
,   SUM(CACHESEM_WAIT_TIME)                    AS "SUM_CACHESEM_WAIT_TIME"
,   SUM(REQUESTS_QUEUED)                       AS "SUM_REQUESTS_QUEUED"
,   SUM(REQUEST_QUEUE_TIME)                    AS "SUM_REQUEST_QUEUE_TIME"
,   SUM(REQUESTS_QUEUED_PREEMPT)               AS "SUM_REQUESTS_QUEUED_PREEMPT"
,   SUM(REQUESTS_QUEUED_LOCK)                  AS "SUM_REQUESTS_QUEUED_LOCK"
,   SUM(LOCK_WAITS)                            AS "SUM_LOCK_WAITS"
,   SUM(LOCK_WAIT_TIME)                        AS "SUM_LOCK_WAIT_TIME"
,   SUM(LOCK_WAIT_TIMEOUTS)                    AS "SUM_LOCK_WAIT_TIMEOUTS"
,   SUM(REQUESTS_DEFERRED)                     AS "SUM_REQUESTS_DEFERRED"
,   SUM(DEFERRAL_TIME)                         AS "SUM_DEFERRAL_TIME"
,   SUM(OPEN_REQUESTS)                         AS "SUM_OPEN_REQUESTS"
,   SUM(CLOSE_REQUESTS)                        AS "SUM_CLOSE_REQUESTS"
,   SUM(ASE_AUDIT_REQUESTS)                    AS "SUM_ASE_AUDIT_REQUESTS"
,   SUM(ASE_SERVICE_TIME)                      AS "SUM_ASE_SERVICE_TIME"
,   SUM(DV_MESSAGES)                           AS "SUM_DV_MESSAGES"
,   SUM(CHECKPOINTS)                           AS "SUM_CHECKPOINTS"
,   SUM(DV_MESSAGE_TIME)                       AS "SUM_DV_MESSAGE_TIME"
,   SUM(CHECKPOINT_TIME)                       AS "SUM_CHECKPOINT_TIME"
,   SUM(DV_MESSAGE_BYTES)                      AS "SUM_DV_MESSAGE_BYTES"
,   SUM(CHECKPOINT_BYTES)                      AS "SUM_CHECKPOINT_BYTES"
,   SUM(SESSIONS)                              AS "SUM_SESSIONS"
,   SUM(SESSION_FIRST_REQUESTS)                AS "SUM_SESSION_FIRST_REQUESTS"
,   SUM(SESSION_NEXT_REQUESTS)                 AS "SUM_SESSION_NEXT_REQUESTS"
,   SUM(SESSION_REQUEST_TIME)                  AS "SUM_SESSION_REQUEST_TIME"
,   SUM(SESSION_SERVICE_TIME)                  AS "SUM_SESSION_SERVICE_TIME"
,   SUM(TRANSACTIONS)                          AS "SUM_TRANSACTIONS"
,   SUM(TRANSACTION_TIME)                      AS "SUM_TRANSACTION_TIME"
,   SUM(TRANSACTION_ABORTS)                    AS "SUM_TRANSACTION_ABORTS"
,   SUM(INSERTS)                               AS "SUM_INSERTS"
,   SUM(UPDATES)                               AS "SUM_UPDATES"
,   SUM(DELETES)                               AS "SUM_DELETES"
,   SUM(FETCHES)                               AS "SUM_FETCHES"
,   SUM(POSITIONS)                             AS "SUM_POSITIONS"
,   SUM(VSBB_INSERTS)                          AS "SUM_VSBB_INSERTS"
,   SUM(SIDETREE_INSERTS)                      AS "SUM_SIDETREE_INSERTS"
,   SUM(FASTPATH_FETCHES)                      AS "SUM_FASTPATH_FETCHES"
,   SUM(FASTPATH_INSERTS)                      AS "SUM_FASTPATH_INSERTS"
,   SUM(FASTPATH_DELETES)                      AS "SUM_FASTPATH_DELETES"
,   SUM(FASTPATH_UPDATES)                      AS "SUM_FASTPATH_UPDATES"
,   SUM(FASTPATH_BULK_FETCHES)                 AS "SUM_FASTPATH_BULK_FETCHES"
,   SUM(CACHE_CALLS)                           AS "SUM_CACHE_CALLS"
,   SUM(CACHE_SERVICE_TIME)                    AS "SUM_CACHE_SERVICE_TIME"
,   SUM(PREFETCHES)                            AS "SUM_PREFETCHES"
,   SUM(LOCK_CALLS)                            AS "SUM_LOCK_CALLS"
,   SUM(LOCK_SERVICE_TIME)                     AS "SUM_LOCK_SERVICE_TIME"
,   SUM(AC_CALLS)                              AS "SUM_AC_CALLS"
,   SUM(AC_SERVICE_TIME)                       AS "SUM_AC_SERVICE_TIME"
,   SUM(SAVEPOINTS)                            AS "SUM_SAVEPOINTS"
,   SUM(SAVEPOINT_ROLLBACKS)                   AS "SUM_SAVEPOINT_ROLLBACKS"
,   SUM(DATA_PARITY_ERRORS)                    AS "SUM_DATA_PARITY_ERRORS"
,   SUM(RECOVERED_PARITY_ERRORS)               AS "SUM_RECOVERED_PARITY_ERRORS"
,   SUM(CMAP_PARITY_ERRORS)                    AS "SUM_CMAP_PARITY_ERRORS"
,   SUM(HARDWARE_COMPRESSION_BUSY_ERRORS)      AS "SUM_HARDWARE_COMPRESSION_BUSY_ERRORS"
,   SUM(HARDWARE_COMPRESSION_USING_SOFTWARE)   AS "SUM_HARDWARE_COMPRESSION_USING_SOFTWARE"
,   SUM(HARDWARE_COMP_SOFTWARE)                AS "SUM_HARDWARE_COMP_SOFTWARE"
,   SUM(HARDWARE_DCOMP_SOFTWARE)               AS "SUM_HARDWARE_DCOMP_SOFTWARE"
,   SUM(COMPRESSIONS)                          AS "SUM_COMPRESSIONS"
,   SUM(COMP_BLOCKS)                           AS "SUM_COMP_BLOCKS"
,   SUM(DECOMPRESSIONS)                        AS "SUM_DECOMPRESSIONS"
,   SUM(DECOMP_BLOCKS)                         AS "SUM_DECOMP_BLOCKS"
,   SUM(COMPRESSION_SERVICE_TIME)              AS "SUM_COMPRESSION_SERVICE_TIME"
,   SUM(DECOMPRESSION_SERVICE_TIME)            AS "SUM_DECOMPRESSION_SERVICE_TIME"
,   SUM(COMP_SECTORS)                          AS "SUM_COMP_SECTORS"
,   SUM(DECOMP_SECTORS)                        AS "SUM_DECOMP_SECTORS"
,   SUM(PRIMARY_PARITY_ERRORS)                 AS "SUM_PRIMARY_PARITY_ERRORS"
,   SUM(MIRROR_PARITY_ERRORS)                  AS "SUM_MIRROR_PARITY_ERRORS"
,   SUM(PRIMARY_IOS)                           AS "SUM_PRIMARY_IOS"
,   SUM(MIRROR_IOS)                            AS "SUM_MIRROR_IOS"
,   SUM(PRIMARY_SERVICE_TIME)                  AS "SUM_PRIMARY_SERVICE_TIME"
,   SUM(MIRROR_SERVICE_TIME)                   AS "SUM_MIRROR_SERVICE_TIME"
,   SUM(ELAPSED_TIME)                          AS "SUM_ELAPSED_TIME"
FROM (SELECT
        CASE '%d'
        WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
    ,   *
    FROM MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_SE_DELTA_1
    WHERE
        GEN_TS_LCT BETWEEN ? and ?
    ) AS A
GROUP BY
    DATE_TIME
,   NODE_ID
,   VOLUME_NAME
ORDER BY
    DATE_TIME
,   NODE_ID
,   VOLUME_NAME
FOR READ UNCOMMITTED ACCESS IN SHARE MODE''' % 1},

        'wms_resources': {
            'Report': 'WMS/resources all intervals for time period',
            'SQL': '''SELECT
    GEN_TS_LCT
,   CURRENT_TS_LCT
,   UPSERT_TS_LCT
,   CPU_BUSY
,   MEMORY_USAGE
FROM
    MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_WMS_RESOURCES_1
WHERE
    GEN_TS_LCT BETWEEN ? AND ?
ORDER BY
    GEN_TS_LCT
FOR READ UNCOMMITTED ACCESS IN SHARE MODE'''},

        'wms_workload': {
            'Report': 'WMS/workload sums for 10-60 Min Intervals',
            'SQL': '''SELECT
    DATE_TIME
,   NODE_ID
,   TRIM(IP_ADDRESS_ID     ) AS IP_ADDRESS_ID
,   TRIM(PROCESS_NAME      ) AS PROCESS_NAME
,   WMS_NODE_ID
,   TRIM(WMS_NODE_NAME     ) AS WMS_NODE_NAME
,   TRIM(WMS_NODE_LIST     ) AS WMS_NODE_LIST
,   SUM(TOTAL_QUERIES      ) AS SUM_TOTAL_QUERIES
,   SUM(TOTAL_EXEC         ) AS SUM_TOTAL_EXEC
,   SUM(TOTAL_WAIT         ) AS SUM_TOTAL_WAIT
,   SUM(TOTAL_HOLD         ) AS SUM_TOTAL_HOLD
,   SUM(TOTAL_SUSPEND      ) AS SUM_TOTAL_SUSPEND
,   SUM(TOTAL_REJECT       ) AS SUM_TOTAL_REJECT
,   SUM(TOTAL_CANCEL       ) AS SUM_TOTAL_CANCEL
,   SUM(TOTAL_COMPLETE     ) AS SUM_TOTAL_COMPLETE
,   SUM(AVG_EXEC_SECS      ) AS SUM_AVG_EXEC_SECS
,   SUM(AVG_WAIT_SECS      ) AS SUM_AVG_WAIT_SECS
,   SUM(AVG_HOLD_SECS      ) AS SUM_AVG_HOLD_SECS
,   SUM(AVG_SUSPEND_SECS   ) AS SUM_AVG_SUSPEND_SECS
,   SUM(CONN_RULE_TRIGGERED) AS SUM_CONN_RULE_TRIGGERED
,   SUM(COMP_RULE_TRIGGERED) AS SUM_COMP_RULE_TRIGGERED
,   SUM(EXEC_RULE_TRIGGERED) AS SUM_EXEC_RULE_TRIGGERED
FROM (SELECT
        CASE '%d'
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
    ,   *
    FROM
        MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_WORKLOAD_SUMMARY_1
    WHERE
        GEN_TS_LCT BETWEEN ? AND ?
    ) AS A
GROUP BY
    DATE_TIME
,   NODE_ID
,   IP_ADDRESS_ID
,   PROCESS_NAME
,   WMS_NODE_ID
,   WMS_NODE_NAME
,   WMS_NODE_LIST
ORDER BY
    DATE_TIME
,   NODE_ID
FOR READ UNCOMMITTED ACCESS IN SHARE MODE''' % 10},

        'session LDAP': {
            'Report': 'Session/Slow LDAPs 1-10-60 Min Intervals',
            'SQL': '''SELECT
    DATE_TIME                                                   AS DATE_TIME
,   COUNT(SESSION_START_TS_LCT)                                 AS SLOW_SESSIONS
,   SUM(TOTAL_LOGIN_ELAPSED_TIME_MCSEC) / 1000000               AS SLOW_LOGIN_SECS
,   SUM(LDAP_LOGIN_ELAPSED_TIME_MCSEC) / 1000000                AS SLOW_LDAP_SECS
,   SUM(SEARCH_CONNECTION_ELAPSED_TIME_MCSEC) / 1000000         AS SLOW_SEARCH_CONNECTION_SECS
,   SUM(SEARCH_ELAPSED_TIME_MCSEC) / 1000000                    AS SLOW_SEARCH_SECS
,   SUM(AUTHENTICATION_CONNECTION_ELAPSED_TIME_MCSEC) / 1000000 AS SLOW_AUTHENTICATION_CONNECTION_SECS
,   SUM(AUTHENTICATION_ELAPSED_TIME_MCSEC) / 1000000            AS SLOW_AUTHENTICATION_SECS
,   SUM(SQL_USER_ELAPSED_TIME_MCSEC) / 1000000                  AS SLOW_SQL_USER_SECS
FROM (SELECT
        CASE '%d'
        WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER) * 10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
    ,   SESSION_START_TS_LCT
    ,   TOTAL_LOGIN_ELAPSED_TIME_MCSEC
    ,   LDAP_LOGIN_ELAPSED_TIME_MCSEC
    ,   SEARCH_CONNECTION_ELAPSED_TIME_MCSEC
    ,   SEARCH_ELAPSED_TIME_MCSEC
    ,   AUTHENTICATION_CONNECTION_ELAPSED_TIME_MCSEC
    ,   AUTHENTICATION_ELAPSED_TIME_MCSEC
    ,   SQL_USER_ELAPSED_TIME_MCSEC
    FROM
        MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_SESSION_2
    WHERE
        SESSION_START_TS_LCT BETWEEN ? AND ?
        AND TOTAL_LOGIN_ELAPSED_TIME_MCSEC > 30000000
    ) AS A
GROUP BY
    DATE_TIME
ORDER BY
    DATE_TIME
FOR READ UNCOMMITTED ACCESS IN SHARE MODE''' % 1},

        'sessions': {
            'Report': 'Session/Aggregates 1-10-60 Min Intervals',
            'SQL': '''SELECT
    DATE_TIME
,   NODE_ID
,   TRIM(IP_ADDRESS_ID                ) AS "IP_ADDRESS_ID"
,   TRIM(PROCESS_NAME                 ) AS "PROCESS_NAME"
,   TRIM(SESSION_ID                   ) AS "SESSION_ID"
,   TRIM(USER_NAME                    ) AS "USER_NAME"
,   TRIM(ROLE_NAME                    ) AS "ROLE_NAME"
,   TRIM(CLIENT_NAME                  ) AS "CLIENT_NAME"
,   TRIM(CLIENT_USER_NAME             ) AS "CLIENT_USER_NAME"
,   TRIM(APPLICATION_NAME             ) AS "APPLICATION_NAME"
,   TRIM(DATASOURCE_NAME              ) AS "DATASOURCE_NAME"
,   SUM(TOTAL_ODBC_EXECUTION_TIME     ) AS "SUM_TOTAL_ODBC_EXECUTION_TIME"
,   SUM(TOTAL_ODBC_ELAPSED_TIME       ) AS "SUM_TOTAL_ODBC_ELAPSED_TIME"
,   SUM(TOTAL_INSERT_STMTS_EXECUTED   ) AS "SUM_TOTAL_INSERT_STMTS_EXECUTED"
,   SUM(TOTAL_DELETE_STMTS_EXECUTED   ) AS "SUM_TOTAL_DELETE_STMTS_EXECUTED"
,   SUM(TOTAL_UPDATE_STMTS_EXECUTED   ) AS "SUM_TOTAL_UPDATE_STMTS_EXECUTED"
,   SUM(TOTAL_SELECT_STMTS_EXECUTED   ) AS "SUM_TOTAL_SELECT_STMTS_EXECUTED"
,   SUM(TOTAL_CATALOG_STMTS           ) AS "SUM_TOTAL_CATALOG_STMTS"
,   SUM(TOTAL_PREPARES                ) AS "SUM_TOTAL_PREPARES"
,   SUM(TOTAL_EXECUTES                ) AS "SUM_TOTAL_EXECUTES"
,   SUM(TOTAL_FETCHES                 ) AS "SUM_TOTAL_FETCHES"
,   SUM(TOTAL_CLOSES                  ) AS "SUM_TOTAL_CLOSES"
,   SUM(TOTAL_EXECDIRECTS             ) AS "SUM_TOTAL_EXECDIRECTS"
,   SUM(TOTAL_ERRORS                  ) AS "SUM_TOTAL_ERRORS"
,   SUM(TOTAL_WARNINGS                ) AS "SUM_TOTAL_WARNINGS"
,   SUM(TOTAL_LOGIN_ELAPSED_TIME_MCSEC) AS "SUM_TOTAL_LOGIN_ELAPSED_TIME_MCSEC"
,   SUM(LDAP_LOGIN_ELAPSED_TIME_MCSEC ) AS "SUM_LDAP_LOGIN_ELAPSED_TIME_MCSEC"
,   MIN(SESSION_START_TS_LCT          ) AS "MIN_SESSION_START_TS_LCT"
,   MAX(SESSION_END_TS_LCT            ) AS "MAX_SESSION_END_TS_LCT"
FROM (SELECT
        CASE '%d'
        WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
    ,   *
    FROM
        MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_SESSION_1
    WHERE
        GEN_TS_LCT  BETWEEN ? AND ?
    ) AS A
GROUP BY
    DATE_TIME
,   NODE_ID
,   IP_ADDRESS_ID
,   PROCESS_NAME
,   SESSION_ID
,   USER_NAME
,   ROLE_NAME
,   CLIENT_NAME
,   CLIENT_USER_NAME
,   APPLICATION_NAME
,   DATASOURCE_NAME
ORDER BY
    DATE_TIME
,   NODE_ID
,   IP_ADDRESS_ID
,   PROCESS_NAME
,   SESSION_ID
,   USER_NAME
,   ROLE_NAME
,   CLIENT_NAME
,   CLIENT_USER_NAME
,   APPLICATION_NAME
,   DATASOURCE_NAME
FOR READ UNCOMMITTED ACCESS IN SHARE MODE''' % 1},

        'rollups': {
            'Report': 'ETL Scripts/Script Execution Summary by Rollup_name',
            'SQL': '''SELECT
    SCRIPT_NAME
,   ROLLUP_NAME
,   TIMESTAMPDIFF(SQL_TSI_SECOND, MIN(EXEC_START_LCT_TS), MAX(EXEC_END_LCT_TS)) / 60 AS ELAP_MINS
,   MIN(EXEC_START_LCT_TS) AS SCRIPT_START_TS
,   MAX(EXEC_END_LCT_TS) AS SCRIPT_END_TS
,   COUNT(*) AS SCRIPT_STEPS
,   SUM(CASE
        WHEN ERROR_CODE <> 0
            THEN 1
        ELSE 0
        END) AS ERROR_CNT
,   SUM(NUM_ROWS_IUD) AS NUM_ROWS_IUD_SUM
,   SUM(ROWS_ACCESSED) AS ROWS_ACCESSED_SUM
,   CAST(SUM(QUERY_ELAPSED_TIME) / 60000000 AS NUMERIC(10, 2)) AS QUERY_ELAPSED_TIME_MIN
,   CAST(SUM(COMPILE_ELAPSED_TIME / 360000000) AS NUMERIC(18, 2)) AS COMPILE_ELAPSED_HRS_SUM
,   (SUM(SQL_PROCESS_BUSY_TIME) + SUM(DISK_PROCESS_BUSY_TIME)) / 36000000.00 AS CPU_BUSY_TIME_MIN
,   SUM(DISK_IOS) AS DISK_IOS_SUM
,   SUM(NUM_REQUEST_MSG_BYTES + NUM_REPLY_MSG_BYTES) AS MSG_BYTES_SUM
,   SUM(MAX_MEM_USED) AS MAX_MEM_USED_SUM
,   SUM(OVF_FILE_COUNT) AS OVF_FILE_COUNT_SUM
,   SUM(WAIT_TIME) / 60.00 AS WAIT_TIME_MIN
,   CAST(SUM(MASTER_EXECUTION_TIME) / 60000000 AS NUMERIC(10, 2)) AS MASTER_EXECUTION_TIME_MIN
,   SUM(HOLD_TIME) AS HOLD_TIME_SUM
,   SUM(TOTAL_MEM_ALLOC) AS TOTAL_MEM_ALLOC_SUM
,   SUM(TOTAL_NUM_AQR_RETRIES) AS TOTAL_NUM_AQR_RETRIES_SUM
,   MID
,   SESS.SESSION_ID AS SESS_ID

FROM NEO.HP_INFRA.SCRIPT_QUERY_HISTORY SESS
WHERE
	SESS.EXEC_START_LCT_TS BETWEEN ? AND ?
GROUP BY SCRIPT_NAME,
	SESS.SESSION_ID,
	MID,
	ROLLUP_NAME
ORDER BY SCRIPT_START_TS'''},

        'events': {
            'Report': 'Events/Aggregates 1-10-60 Min Intervals w text2',
            'SQL': '''SELECT
    DATE_TIME              AS DATE_TIME
,   NODE_ID                AS NODE_ID
,   IP_ADDRESS_ID          AS IP_ADDRESS_ID
,   COMPONENT_NAME         AS COMPONENT_NAME
,   SEVERITY_NAME          AS SEVERITY_NAME
,   EVENT_ID               AS EVENT_ID
,   COUNT(EVENT_ID)        AS EVENT_COUNTS
,   MIN(TEXT)              AS TEXT_EXAMPLE
FROM (SELECT
        CASE '%s'
        WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
,       NODE_ID
,       IP_ADDRESS_ID
,       COMPONENT_NAME
,       SEVERITY_NAME
,       EVENT_ID
,       TEXT
    FROM
        MANAGEABILITY.INSTANCE_REPOSITORY.EVENT_TEXT_1
    WHERE
            GEN_TS_LCT BETWEEN ? AND ?
    ) AS A
GROUP BY
    DATE_TIME
,   NODE_ID
,   IP_ADDRESS_ID
,   COMPONENT_NAME
,   SEVERITY_NAME
,   EVENT_ID
ORDER BY
    DATE_TIME
,   NODE_ID
,   IP_ADDRESS_ID
,   COMPONENT_NAME
,   SEVERITY_NAME
,   EVENT_ID
FOR READ UNCOMMITTED ACCESS IN SHARE MODE'''},

        'memory': {
            'Report': 'Memory/Aggregates 1-10-60 Min Intervals',
            'SQL': '''SELECT
    DATE_TIME
,   TRIM(IP_ADDRESS_ID          )              AS IP_ADDRESS_ID
,   CAST(AVG(TOTAL/1048576      ) AS DEC(8,2)) AS AVG_GB_TOTAL_MEM
,   CAST(AVG(FREE_MEMORY/1048576) AS DEC(8,2)) AS AVG_GB_FREE_MEM
,   CAST(AVG(BUFFERS/1048576    ) AS DEC(8,2)) AS AVG_GB_BUFFERS_MEM
,   CAST(AVG(CACHED/1048576     ) AS DEC(8,2)) AS AVG_GB_CACHED_MEM
,   CAST(AVG(SWAP_CACHED/1048576) AS DEC(8,2)) AS AVG_GB_SWAP_CACHED_MEM
,   CAST(AVG(ACTIVE/1048576     ) AS DEC(8,2)) AS AVG_GB_ACTIVE_MEM
,   CAST(AVG(INACTIVE/1048576   ) AS DEC(8,2)) AS AVG_GB_INACTIVE_MEM
,   CAST(AVG(SWAP_TOTAL/1048576 ) AS DEC(8,2)) AS AVG_GB_SWAP_TOTAL_MEM
,   CAST(AVG(SWAP_FREE/1048576  ) AS DEC(8,2)) AS AVG_GB_SWAP_FREE_MEM
FROM (SELECT
        CASE '%s'
        WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
,       IP_ADDRESS_ID
,       TOTAL
,       FREE_MEMORY
,       BUFFERS
,       CACHED
,       SWAP_CACHED
,       ACTIVE
,       INACTIVE
,       SWAP_TOTAL
,       SWAP_FREE
    FROM
        MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_MEMORY_1
    WHERE
      GEN_TS_LCT BETWEEN ? AND ?
    ) AS A
GROUP BY
     DATE_TIME
,   IP_ADDRESS_ID
ORDER BY
     DATE_TIME
,   IP_ADDRESS_ID
FOR READ UNCOMMITTED ACCESS IN SHARE MODE'''},

        'network aggr': {
            'Report': 'Network/Aggregates 1-10-60 Min Intervals',
            'SQL': '''SELECT
    DATE_TIME
,   TRIM(INTERFACE         )                   AS INTERFACE
,   CAST(SUM(RCV_BYTES     ) AS NUMERIC(18,0)) AS SUM_RCV_BYTES
,   CAST(SUM(RCV_PACKETS   ) AS NUMERIC(18,0)) AS SUM_RCV_PACKETS
,   CAST(SUM(RCV_ERRS      ) AS NUMERIC(18,0)) AS SUM_RCV_ERRS
,   CAST(SUM(RCV_DROP      ) AS NUMERIC(18,0)) AS SUM_RCV_DROP
,   CAST(SUM(RCV_FIFO      ) AS NUMERIC(18,0)) AS SUM_RCV_FIFO
,   CAST(SUM(RCV_FRAME     ) AS NUMERIC(18,0)) AS SUM_RCV_FRAME
,   CAST(SUM(RCV_COMPRESSED) AS NUMERIC(18,0)) AS SUM_RCV_COMPRESSED
,   CAST(SUM(RCV_MULTICAST ) AS NUMERIC(18,0)) AS SUM_RCV_MULTICAST
,   CAST(SUM(TXN_BYTES     ) AS NUMERIC(18,0)) AS SUM_TXN_BYTES
,   CAST(SUM(TXN_PACKETS   ) AS NUMERIC(18,0)) AS SUM_TXN_PACKETS
,   CAST(SUM(TXN_ERRS      ) AS NUMERIC(18,0)) AS SUM_TXN_ERRS
,   CAST(SUM(TXN_DROP      ) AS NUMERIC(18,0)) AS SUM_TXN_DROP
,   CAST(SUM(TXN_FIFO      ) AS NUMERIC(18,0)) AS SUM_TXN_FIFO
,   CAST(SUM(TXN_COLLS     ) AS NUMERIC(18,0)) AS SUM_TXN_COLLS
,   CAST(SUM(TXN_CARRIER   ) AS NUMERIC(18,0)) AS SUM_TXN_CARRIER
,   CAST(SUM(TXN_COMPRESSED) AS NUMERIC(18,0)) AS SUM_TXN_COMPRESSED
FROM (SELECT
        CASE '%d'
        WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
,       IP_ADDRESS_ID
,       INTERFACE
,       RCV_BYTES
,       RCV_PACKETS
,       RCV_ERRS
,       RCV_DROP
,       RCV_FIFO
,       RCV_FRAME
,       RCV_COMPRESSED
,       RCV_MULTICAST
,       TXN_BYTES
,       TXN_PACKETS
,       TXN_ERRS
,       TXN_DROP
,       TXN_FIFO
,       TXN_COLLS
,       TXN_CARRIER
,       TXN_COMPRESSED
    FROM
        MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_NETWORK_1
    WHERE
        GEN_TS_LCT BETWEEN ? AND ?
    ) AS A
GROUP BY
    DATE_TIME
   ,INTERFACE
ORDER BY
   DATE_TIME
  ,INTERFACE
FOR READ UNCOMMITTED ACCESS IN SHARE MODE''' % 1},

        'node': {
            'Report': 'Node/Aggregates 1-10-60 Min Intervals',
            'SQL': '''SELECT
    DATE_TIME
,   IP_ADDRESS_ID
,   CAST(AVG(AVG_TOTAL   ) AS DEC(6,2)) AS "AVG_TOTAL_BUSY"
,   CAST(AVG(AVG_USER    ) AS DEC(6,2)) AS "AVG_USER_BUSY"
,   CAST(AVG(AVG_NICE    ) AS DEC(6,2)) AS "AVG_NICE_BUSY"
,   CAST(AVG(AVG_SYSTEM  ) AS DEC(6,2)) AS "AVG_SYSTEM_BUSY"
,   CAST(AVG(AVG_IDLE    ) AS DEC(6,2)) AS "AVG_IDLE_BUSY"
,   CAST(AVG(AVG_IOWAIT  ) AS DEC(6,2)) AS "AVG_IOWAIT_BUSY"
,   CAST(AVG(AVG_IRQ     ) AS DEC(6,2)) AS "AVG_IRQ_BUSY"
,   CAST(AVG(AVG_SOFT_IRQ) AS DEC(6,2)) AS "AVG_SOFT_IRQ_BUSY"
,   CAST(AVG(AVG_STEAL   ) AS DEC(6,2)) AS "AVG_STEAL_BUSY"
,   CAST(AVG(AVG_GUEST   ) AS DEC(6,2)) AS "AVG_GUEST_BUSY"
FROM (SELECT
        CASE '%d'
        WHEN '1' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 2) AS INTEGER) AS INTERVAL MINUTE)
        WHEN '10' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
            + CAST(CAST(SUBSTRING(CAST(GEN_TS_LCT AS CHAR(26)) FROM 15 FOR 1) AS INTEGER)*10 AS INTERVAL MINUTE)
        WHEN '60' THEN
            CAST(CAST((GEN_TS_LCT) AS DATE) AS TIMESTAMP(0))
            + CAST(HOUR((GEN_TS_LCT)) AS INTERVAL HOUR)
        END
        AS DATE_TIME
,       IP_ADDRESS_ID
,       AVG_TOTAL
,       AVG_USER
,       AVG_NICE
,       AVG_SYSTEM
,       AVG_IDLE
,       AVG_IOWAIT
,       AVG_IRQ
,       AVG_SOFT_IRQ
,       AVG_STEAL
,       AVG_GUEST
     FROM
         MANAGEABILITY.INSTANCE_REPOSITORY.METRIC_NODE_1
     WHERE
         GEN_TS_LCT BETWEEN ? AND ?
    ) AS A
GROUP BY
    DATE_TIME
,   IP_ADDRESS_ID
ORDER BY
    DATE_TIME
,   IP_ADDRESS_ID
FOR READ UNCOMMITTED ACCESS IN SHARE MODE''' % 1},
    }.get(action)

    return report['SQL'] if report else ''
